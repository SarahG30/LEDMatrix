#include <mega164a.h>
#include <stdio.h>
#include <delay.h>  
#include <string.h> 
#include <stdlib.h>

void main(void)
{
char name[5];
char PORT[8] = {1,2,4,8,16,32,64,128};
static int ALPHA[10][8]={{0,0b01101000,0b01100100,0b00000010,0b00000010,0b01100100,0b01101000,0},
{0, 0b01100010, 0b01100100, 0b00001000, 0b00001000, 0b01100100, 0b01100010, 0},
{0, 0b01000100, 0b01000100, 0b00000100, 0b00000100, 0b01000100, 0b01000100, 0},
{0b00100000, 0b00100000, 0b00110100, 0b00000100, 0b00100100, 0b00100100, 0b00110000, 0},
{0, 0b10100100, 0b11001000, 0b01101000, 0b01101000, 0b11001000, 0b10100100, 0},
{0b01010001, 0b00100010, 0b01010100, 0b00000100, 0b00000100, 0b01010100, 0b00100010, 0b01010001},
{0b01000000, 0b10011100, 0b01010010, 0b00010010, 0b01010010, 0b10010100, 0b01011000, 0},
{0b10001001, 0b01010010, 0b00100100, 0b00000100, 0b00000100, 0b00100100, 0b01010010, 0b10001001},
{0b00111000, 0b01111100, 0b01111110, 0b00111111, 0b01111110, 0b01111100, 0b00111000, 0},
{0b01000110, 0b00100001, 0b01000001, 0b00000110, 0b01000001, 0b00100001, 0b01000110, 0}};
static char emotii[10][6] = {"happy", "upset", "bored", "sassy", "angry", "death", "smile", "worry", "heart", "cutie"};
    int l = 0;
    int m = 0, k=0, j=0, n=0;
    // this must be the first "init" action/call!
    #asm("sei")
// Crystal Oscillator division factor: 1
#pragma optsize-
CLKPR=(1<<CLKPCE);
CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
#ifdef _OPTIMIZE_SIZE_
#pragma optsize+
#endif

// Input/Output Ports initialization
// Port A initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);

// Port B initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);

// Port C initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);

// Port D initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);

// USART0 initialization
// Communication Parameters: 8 Data, 1 Stop, No Parity
// USART0 Receiver: On
// USART0 Transmitter: On
// USART0 Mode: Asynchronous
// USART0 Baud Rate: 9600
UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
UBRR0H=0x00;
UBRR0L=0x81;

while (1)
      {  
      gets(name, 5);
      for(m=0; m < 10; m++)
      {
        if(!strncmp(name, emotii[m], 5))
        {
            l = m;
            printf("%d", l);
        }
      }
       for (n=0;n<200;n++)//execute 200 times for the eye to catch
        {
        for (j=0;j<4;j++)
        {
        PORTB = PORT[j];// ROW
        PORTD = ~ALPHA[l][j];//show half of face (COLUMN)
        delay_us(500);
        }
        PORTB=0x00;//clear screen after show
        for (k=0;k<4;k++)
        {
        PORTC = PORT[k];// ROW
        PORTD = ~ALPHA[l][k+4];//show other half of face (COLUMN)
        delay_us(500);
        }
        PORTC=0x00;//clear screen after show.
        PORTB=0x00;
        }
        delay_ms(220);
        delay_ms(220);
        delay_ms(220);
        delay_ms(220);
        delay_ms(220);  
      }
}
